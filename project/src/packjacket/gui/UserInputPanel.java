/*
 * PackJacket - GUI frontend to IzPack to make Java-based installers
 * Copyright (C) 2008 - 2009  Amandeep Grewal, Manodasan Wignarajah
 *
 * PackJacket is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PackJacket is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PackJacket.  If not, see <http://www.gnu.org/licenses/>.
 */
package packjacket.gui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import packjacket.RunnerClass;
import packjacket.StaticUtils;
import packjacket.gui.userinput.CheckBoxPanel;
import packjacket.gui.userinput.DividerPanel;
import packjacket.gui.userinput.FileDirectoryPanel;
import packjacket.gui.userinput.ListChoicePanel;
import packjacket.gui.userinput.PasswordFieldPanel;
import packjacket.gui.userinput.StaticTextPanel;
import packjacket.gui.userinput.TextInputPanel;
import packjacket.xml.CheckBox;
import packjacket.xml.Choice;
import packjacket.xml.Divider;
import packjacket.xml.FileField;
import packjacket.xml.PasswordField;
import packjacket.xml.RadioComboCheck;
import packjacket.xml.Space;
import packjacket.xml.StaticText;
import packjacket.xml.TextInput;
import packjacket.xml.UserInput;

/**
 * Contains implementation of the UserInput panel
 * @author Manodasan Wignarajah
 */
public class UserInputPanel extends javax.swing.JPanel {

    public ArrayListModel<UserInput> userInput;
    public boolean isEditing;

    /** Creates new form UserInputPanel */
    public UserInputPanel() {
        initComponents();
        quickxportItemStateChanged(null);
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                userInputPanel.setVisible(false);
            }
        });
        userInput = new ArrayListModel(userInputList);
        isEditing = false;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        userInputOption = new javax.swing.JCheckBox();
        userInputPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        title = new javax.swing.JTextField();
        bold = new javax.swing.JCheckBox();
        italics = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        fontSize = new javax.swing.JSpinner(new javax.swing.SpinnerNumberModel(0,0,2147483647,1));
        jLabel3 = new javax.swing.JLabel();
        quickxport = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        staticText = new javax.swing.JButton();
        listChoice = new javax.swing.JButton();
        passwordField = new javax.swing.JButton();
        fileDirectory = new javax.swing.JButton();
        checkBox = new javax.swing.JButton();
        textInput = new javax.swing.JButton();
        divider = new javax.swing.JButton();
        space = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        delButton = new javax.swing.JButton();
        upButton = new javax.swing.JButton();
        downButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        userInputList = new javax.swing.JList();
        qxNameLabel = new javax.swing.JLabel();
        qxName = new javax.swing.JTextField();

        userInputOption.setText("Use User Input Panel");
        userInputOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userInputOptionActionPerformed(evt);
            }
        });

        jLabel1.setText("Title");

        bold.setText("Bold");

        italics.setText("Italics");

        jLabel2.setText("Font Multiplier");

        fontSize.setValue(new Integer(2));

        jLabel3.setText("QuickXport User Input");

        quickxport.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
        quickxport.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Disabled", "List Variable Values", "List Variable Names & Values" }));
        quickxport.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                quickxportItemStateChanged(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Add"));

        staticText.setText("Static Text");
        staticText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                staticTextActionPerformed(evt);
            }
        });

        listChoice.setText("List Choice");
        listChoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listChoiceActionPerformed(evt);
            }
        });

        passwordField.setText("Password Field");
        passwordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordFieldActionPerformed(evt);
            }
        });

        fileDirectory.setText("File/Directory");
        fileDirectory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileDirectoryActionPerformed(evt);
            }
        });

        checkBox.setText("Check Box");
        checkBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxActionPerformed(evt);
            }
        });

        textInput.setText("Text Input");
        textInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textInputActionPerformed(evt);
            }
        });

        divider.setText("Divider");
        divider.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dividerActionPerformed(evt);
            }
        });

        space.setText("Space");
        space.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spaceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(staticText, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(checkBox, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textInput, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(listChoice, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(space, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                    .addComponent(passwordField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fileDirectory, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                    .addComponent(divider, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(staticText)
                    .addComponent(listChoice)
                    .addComponent(passwordField)
                    .addComponent(fileDirectory))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkBox)
                    .addComponent(textInput)
                    .addComponent(divider)
                    .addComponent(space))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        editButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/edit.png"))); // NOI18N
        editButton.setText("Edit");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        delButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/remove.png"))); // NOI18N
        delButton.setText("Delete");
        delButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delButtonActionPerformed(evt);
            }
        });

        upButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/up.png"))); // NOI18N
        upButton.setText("Up");
        upButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upButtonActionPerformed(evt);
            }
        });

        downButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/down.png"))); // NOI18N
        downButton.setText("Down");
        downButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(userInputList);

        qxNameLabel.setText("QuickXport Filename");

        javax.swing.GroupLayout userInputPanelLayout = new javax.swing.GroupLayout(userInputPanel);
        userInputPanel.setLayout(userInputPanelLayout);
        userInputPanelLayout.setHorizontalGroup(
            userInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userInputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(userInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 494, Short.MAX_VALUE)
                    .addGroup(userInputPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bold)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(italics)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addGap(6, 6, 6)
                        .addComponent(fontSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(userInputPanelLayout.createSequentialGroup()
                        .addGroup(userInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(qxNameLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(userInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(qxName)
                            .addComponent(quickxport, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(193, Short.MAX_VALUE))
                    .addGroup(userInputPanelLayout.createSequentialGroup()
                        .addGroup(userInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(userInputPanelLayout.createSequentialGroup()
                                .addComponent(editButton, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(delButton, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(upButton, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(downButton, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        userInputPanelLayout.setVerticalGroup(
            userInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userInputPanelLayout.createSequentialGroup()
                .addGroup(userInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bold)
                    .addComponent(italics)
                    .addComponent(jLabel2)
                    .addComponent(fontSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(userInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(quickxport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(userInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(qxNameLabel)
                    .addComponent(qxName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(userInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(userInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(delButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(downButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(upButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(userInputPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(userInputOption))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(userInputOption)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(userInputPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Adjust the GUI
     */
    public void adjustGUI() {
        userInputOptionActionPerformed(null);
    }

    private void userInputOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userInputOptionActionPerformed
        //Makes the UserInputPanel visible or not
        if (userInputOption.isSelected())
            userInputPanel.setVisible(true);
        else
            userInputPanel.setVisible(false);
        RunnerClass.mf.panelsPanel.panelsModel.set(StaticUtils.max(StaticUtils.indexesOf(RunnerClass.mf.panelsPanel.panelsModel, new String[]{
                    "UserInputPanel", "UserInputPaneltrue", "UserInputPanelfalse"})),
                "UserInputPanel" + userInputOption.isSelected());
        RunnerClass.mf.setMinimumSize(RunnerClass.mf.getPreferredSize());
    }//GEN-LAST:event_userInputOptionActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        //Does the appropriate actions depending on what user chose to edit
        isEditing = true;
        if (userInput.getElement().type.equals("staticText"))
            staticTextActionPerformed(null);
        else if (userInput.getElement().type.equals("check"))
            checkBoxActionPerformed(null);
        else if (userInput.getElement().type.equals("radiocombocheck"))
            listChoiceActionPerformed(null);
        else if (userInput.getElement().type.equals("text"))
            textInputActionPerformed(null);
        else if (userInput.getElement().type.equals("password"))
            passwordFieldActionPerformed(null);
        else if (userInput.getElement().type.equals("filedir"))
            fileDirectoryActionPerformed(null);
        else if (userInput.getElement().type.equals("divider"))
            dividerActionPerformed(null);
        else
            JOptionPane.showMessageDialog(RunnerClass.mf, "A space cannot be edited, due to there is no fields it has to change!", "Cannot Edit", JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_editButtonActionPerformed

    private void delButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delButtonActionPerformed
        //Removes the current user input
        userInput.remove();
    }//GEN-LAST:event_delButtonActionPerformed

    private void upButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upButtonActionPerformed
        //Moves up the currently chosen user input
        userInput.moveUp();
    }//GEN-LAST:event_upButtonActionPerformed

    private void downButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downButtonActionPerformed
        //Moves down the currently chosen user input
        userInput.moveDown();
    }//GEN-LAST:event_downButtonActionPerformed
//The following methods adds or stores the edited values and gives the appropriate error message for their respective user input component
    private void staticTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_staticTextActionPerformed

        final StaticTextPanel staticTextPanel = new StaticTextPanel();
        if (evt != null)
            isEditing = false;
        else {
            StaticText u = (StaticText) userInput.getElement();
            staticTextPanel.text.setText(u.text);
            staticTextPanel.align.setSelectedItem(u.align);
        }

        ((BtnPanel) staticTextPanel.okPanel).addOkBtnActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                StringBuffer errormsg = new StringBuffer();
                if (staticTextPanel.text.getText().trim().equals(""))
                    errormsg.append("You have not specified any text.\n");
                if (errormsg.length() != 0) {
                    String msg = errormsg.substring(0, errormsg.length() - 1);
                    JOptionPane.showMessageDialog(RunnerClass.mf, msg, "Incomplete Data", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                StaticText u;
                if (isEditing)
                    u = (StaticText) userInput.getElement();
                else
                    u = new StaticText();
                u.text = staticTextPanel.text.getText().trim();
                u.align = staticTextPanel.align.getSelectedItem().toString();

                if (!isEditing)
                    userInput.add(u);

                RunnerClass.mf.removeP();
            }
        });
        RunnerClass.mf.addP(staticTextPanel);
//        RunnerClass.mf.pack();
    }//GEN-LAST:event_staticTextActionPerformed

    private void listChoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listChoiceActionPerformed

        final ListChoicePanel listChoicePanel = new ListChoicePanel();
        if (evt != null)
            isEditing = false;
        else {
            RadioComboCheck u = (RadioComboCheck) userInput.getElement();

            if (u.real_type.equals("radio"))
                listChoicePanel.radioButton.setSelected(true);
            else if (u.real_type.equals("combo"))
                listChoicePanel.comboBox.setSelected(true);
            else if (u.real_type.equals("check"))
                listChoicePanel.checkBox.setSelected(true);
            listChoicePanel.descriptionOption.setSelected(u.descriptionOption);
            listChoicePanel.description.setText(u.description);
            listChoicePanel.align.setSelectedItem(u.description_align);
            listChoicePanel.comboBoxLabel.setText(u.spec_txt);
            listChoicePanel.variable.setText(u.variable);
            if (!listChoicePanel.checkBox.isSelected()) {
                listChoicePanel.choices.setList((ArrayList<Choice>) u.choices);
                for (int a = 0; a < listChoicePanel.choices.getSize(); a++) {
                    listChoicePanel.preselected.addItem(listChoicePanel.choices.getElementAt(a));
                    if (listChoicePanel.choices.getElementAt(a).text.equals(u.set))
                        listChoicePanel.preselected.setSelectedItem(listChoicePanel.choices.getElementAt(a));
                }
            } else
                listChoicePanel.choices2.setList((ArrayList<Choice>) u.choices);
            listChoicePanel.adjustUI();
        }
        ((BtnPanel) listChoicePanel.okPanel3).addOkBtnActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                StringBuffer errormsg = new StringBuffer();
                if (listChoicePanel.variablePanel.isVisible())
                    if (listChoicePanel.variable.getText().trim().equals(""))
                        errormsg.append("You have not specified a variable name.\n");
                if (listChoicePanel.descriptionOption.isSelected() && listChoicePanel.description.getText().trim().equals(""))
                    errormsg.append("You have chosen to specify a description, but have not specified one.\n");
                if (listChoicePanel.comboBoxLabel.isVisible() && listChoicePanel.comboBoxLabel.getText().trim().equals(""))
                    errormsg.append("You have not specified a combo box label.\n");
                int size = listChoicePanel.choiceListPanel1.isVisible() ? listChoicePanel.choicesList.getModel().getSize() : listChoicePanel.choicesList2.getModel().getSize();
                if (size == 0)
                    errormsg.append("You have not specified any choices.\n");
                if (size == 1)
                    errormsg.append("You have specified only one choice! You must add at least 1 more!\n");
                if (errormsg.length() != 0) {
                    String msg = errormsg.substring(0, errormsg.length() - 1);
                    JOptionPane.showMessageDialog(RunnerClass.mf, msg, "Incomplete Data", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                RadioComboCheck u;
                if (isEditing)
                    u = (RadioComboCheck) userInput.getElement();
                else
                    u = new RadioComboCheck();
                if (listChoicePanel.radioButton.isSelected())
                    u.real_type = "radio";
                else if (listChoicePanel.comboBox.isSelected())
                    u.real_type = "combo";
                else if (listChoicePanel.checkBox.isSelected())
                    u.real_type = "check";
                u.descriptionOption = listChoicePanel.descriptionOption.isSelected();
                u.description = listChoicePanel.description.getText().trim();
                u.description_align = listChoicePanel.align.getSelectedItem().toString();
                u.set = !listChoicePanel.checkBox.isSelected() ? listChoicePanel.preselected.getSelectedItem().toString() : "";
                u.spec_txt = listChoicePanel.comboBoxLabel.getText().trim();
                u.variable = listChoicePanel.variable.getText().trim();
                if (listChoicePanel.choiceListPanel1.isVisible())
                    u.choices = listChoicePanel.choices.list;
                else
                    u.choices = listChoicePanel.choices2.list;
                if (!isEditing)
                    userInput.add(u);

                RunnerClass.mf.removeP();
            }
        });
        RunnerClass.mf.addP(listChoicePanel);
//        RunnerClass.mf.pack();
    }//GEN-LAST:event_listChoiceActionPerformed

    private void passwordFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordFieldActionPerformed

        final PasswordFieldPanel passwordFieldPanel = new PasswordFieldPanel();
        if (evt != null)
            isEditing = false;
        else {
            PasswordField u = (PasswordField) userInput.getElement();
            passwordFieldPanel.variable.setText(u.variable);
            passwordFieldPanel.label1.setText(u.text1);
            passwordFieldPanel.label2.setText(u.text2);
            passwordFieldPanel.align.setSelectedItem(u.align);
            passwordFieldPanel.width.setValue(u.size);
        }
        ((BtnPanel) passwordFieldPanel.okPanel).addOkBtnActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                StringBuffer errormsg = new StringBuffer();
                if (passwordFieldPanel.variable.getText().trim().equals(""))
                    errormsg.append("You have not specified a variable name.\n");
                if (passwordFieldPanel.label1.getText().trim().equals(""))
                    errormsg.append("You have not specified anything for the first label field.\n");
                if (passwordFieldPanel.label2.getText().trim().equals(""))
                    errormsg.append("You have not specified anything for the retype label field.\n");
                if (errormsg.length() != 0) {
                    String msg = errormsg.substring(0, errormsg.length() - 1);
                    JOptionPane.showMessageDialog(RunnerClass.mf, msg, "Incomplete Data", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                PasswordField u;
                if (isEditing)
                    u = (PasswordField) userInput.getElement();
                else
                    u = new PasswordField();
                u.variable = passwordFieldPanel.variable.getText().trim();
                u.text1 = passwordFieldPanel.label1.getText().trim();
                u.text2 = passwordFieldPanel.label2.getText().trim();
                u.align = passwordFieldPanel.align.getSelectedItem().toString();
                u.size = ((Integer) passwordFieldPanel.width.getValue()).intValue();
                if (!isEditing)
                    userInput.add(u);

                RunnerClass.mf.removeP();
            }
        });
        RunnerClass.mf.addP(passwordFieldPanel);
//        RunnerClass.mf.pack();
    }//GEN-LAST:event_passwordFieldActionPerformed

    private void fileDirectoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileDirectoryActionPerformed

        final FileDirectoryPanel fileDirectoryPanel = new FileDirectoryPanel();
        if (evt != null)
            isEditing = false;
        else {
            FileField u = (FileField) userInput.getElement();
            fileDirectoryPanel.fileOption.setSelected(u.type_real.equals("file") ? true : false);
            fileDirectoryPanel.directoryOption.setSelected(!u.type_real.equals("file") ? true : false);
            fileDirectoryPanel.variable.setText(u.variable);
            fileDirectoryPanel.text.setText(u.label);
            fileDirectoryPanel.initialValue.setText(u.set);
            fileDirectoryPanel.align.setSelectedItem(u.align);
            fileDirectoryPanel.width.setValue(new Integer(u.size));
        }
        ((BtnPanel) fileDirectoryPanel.okPanel).addOkBtnActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                StringBuffer errormsg = new StringBuffer();
                if (fileDirectoryPanel.variable.getText().trim().equals(""))
                    errormsg.append("You have not specified a variable name.\n");
                if (fileDirectoryPanel.text.getText().trim().equals(""))
                    errormsg.append("You have not specified anything for the \"Label Text\" field.\n");
                if (errormsg.length() != 0) {
                    String msg = errormsg.substring(0, errormsg.length() - 1);
                    JOptionPane.showMessageDialog(RunnerClass.mf, msg, "Incomplete Data", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                FileField u;
                if (isEditing)
                    u = (FileField) userInput.getElement();
                else
                    u = new FileField();
                u.type_real = fileDirectoryPanel.fileOption.isSelected() ? "file" : "dir";
                u.variable = fileDirectoryPanel.variable.getText().trim();
                u.label = fileDirectoryPanel.text.getText().trim();
                u.set = fileDirectoryPanel.initialValue.getText().trim();
                u.align = fileDirectoryPanel.align.getSelectedItem().toString();
                u.size = ((Integer) fileDirectoryPanel.width.getValue()).intValue();
                if (!isEditing)
                    userInput.add(u);

                RunnerClass.mf.removeP();
            }
        });
        RunnerClass.mf.addP(fileDirectoryPanel);
//        RunnerClass.mf.pack();
    }//GEN-LAST:event_fileDirectoryActionPerformed

    private void checkBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxActionPerformed

        final CheckBoxPanel checkBoxPanel = new CheckBoxPanel();
        if (evt != null)
            isEditing = false;
        else {
            CheckBox u = (CheckBox) userInput.getElement();
            checkBoxPanel.variable.setText(u.variable);
            checkBoxPanel.descriptionOption.setSelected(u.descriptionOption);
            checkBoxPanel.description.setText(u.description);
            checkBoxPanel.align.setSelectedItem(u.description_align);
            checkBoxPanel.text.setText(u.text);
            checkBoxPanel.ifTrue.setText(u.trueIf);
            checkBoxPanel.ifFalse.setText(u.falseIf);
            checkBoxPanel.preSelected.setSelected(u.set);
            checkBoxPanel.adjustUI();
        }
        ((BtnPanel) checkBoxPanel.okPanel).addOkBtnActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                StringBuffer errormsg = new StringBuffer();
                if (checkBoxPanel.variable.getText().trim().equals(""))
                    errormsg.append("You have not specified a variable name.\n");
                if (checkBoxPanel.descriptionOption.isSelected() && checkBoxPanel.description.getText().trim().equals(""))
                    errormsg.append("You have chose to specify a description, but have not specified one.\n");
                if (checkBoxPanel.text.getText().trim().equals(""))
                    errormsg.append("You have not specified anything for the text field.\n");
                if (checkBoxPanel.ifTrue.getText().trim().equals(""))
                    errormsg.append("You have not specified anything for the \"Value If True\" field.\n");
                if (checkBoxPanel.ifFalse.getText().trim().equals(""))
                    errormsg.append("You have not specified anything for the \"Value if False\" field.\n");
                if (errormsg.length() != 0) {
                    String msg = errormsg.substring(0, errormsg.length() - 1);
                    JOptionPane.showMessageDialog(RunnerClass.mf, msg, "Incomplete Data", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                CheckBox u;
                if (isEditing)
                    u = (CheckBox) userInput.getElement();
                else
                    u = new CheckBox();
                u.variable = checkBoxPanel.variable.getText().trim();
                u.descriptionOption = checkBoxPanel.descriptionOption.isSelected();
                u.description = checkBoxPanel.description.getText().trim();
                u.description_align = checkBoxPanel.align.getSelectedItem().toString();
                u.text = checkBoxPanel.text.getText().trim();
                u.trueIf = checkBoxPanel.ifTrue.getText().trim();
                u.falseIf = checkBoxPanel.ifFalse.getText().trim();
                u.set = checkBoxPanel.preSelected.isSelected();
                if (!isEditing)
                    userInput.add(u);

                RunnerClass.mf.removeP();
            }
        });
        RunnerClass.mf.addP(checkBoxPanel);
//        RunnerClass.mf.pack();
    }//GEN-LAST:event_checkBoxActionPerformed

    private void textInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textInputActionPerformed

        final TextInputPanel textInputPanel = new TextInputPanel();
        if (evt != null)
            isEditing = false;
        else {
            TextInput u = (TextInput) userInput.getElement();
            textInputPanel.text.setText(u.text);
            textInputPanel.variable.setText(u.variable);
            textInputPanel.width.setValue(new Integer(u.size));
            textInputPanel.initialValueOption.setSelected(u.setOption);
            textInputPanel.initialValue.setText(u.set);
            textInputPanel.descriptionOption.setSelected(u.descriptionOption);
            textInputPanel.description.setText(u.description_text);
            textInputPanel.align.setSelectedItem(u.description_align);
            textInputPanel.adjustUI();
        }
        ((BtnPanel) textInputPanel.okPanel).addOkBtnActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                StringBuffer errormsg = new StringBuffer();
                if (textInputPanel.text.getText().trim().equals(""))
                    errormsg.append("You have not specified anything for the \"Text on the Label\" field.\n");
                if (textInputPanel.variable.getText().trim().equals(""))
                    errormsg.append("You have not specified a variable name.\n");
                if (textInputPanel.initialValueOption.isSelected() && textInputPanel.initialValue.getText().trim().equals(""))
                    errormsg.append("You have chosen to specify an initial value, but have not specified anything for that field.\n");
                if (textInputPanel.descriptionOption.isSelected() && textInputPanel.description.getText().trim().equals(""))
                    errormsg.append("You have chosen to specify a description but have not specified one.\n");
                if (errormsg.length() != 0) {
                    String msg = errormsg.substring(0, errormsg.length() - 1);
                    JOptionPane.showMessageDialog(RunnerClass.mf, msg, "Incomplete Data", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                TextInput u;
                if (isEditing)
                    u = (TextInput) userInput.getElement();
                else
                    u = new TextInput();
                u.text = textInputPanel.text.getText().trim();
                u.variable = textInputPanel.variable.getText().trim();
                u.size = ((Integer) textInputPanel.width.getValue()).intValue();
                u.setOption = textInputPanel.initialValueOption.isSelected();
                u.set = textInputPanel.initialValue.getText().trim();
                u.descriptionOption = textInputPanel.descriptionOption.isSelected();
                u.description_text = textInputPanel.description.getText().trim();
                u.description_align = textInputPanel.align.getSelectedItem().toString();
                if (!isEditing)
                    userInput.add(u);

                RunnerClass.mf.removeP();
            }
        });
        RunnerClass.mf.addP(textInputPanel);
//        RunnerClass.mf.pack();
    }//GEN-LAST:event_textInputActionPerformed

    private void spaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spaceActionPerformed
        userInput.add(new Space());
    }//GEN-LAST:event_spaceActionPerformed

    private void dividerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dividerActionPerformed

        final DividerPanel dividerPanel = new DividerPanel();
        if (evt != null)
            isEditing = false;
        else {
            Divider u = (Divider) userInput.getElement();
            dividerPanel.align.setSelectedItem(u.align);
        }
        ((BtnPanel) dividerPanel.okPanel).addOkBtnActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                Divider u;
                if (isEditing)
                    u = (Divider) userInput.getElement();
                else
                    u = new Divider();
                u.align = dividerPanel.align.getSelectedItem().toString();
                if (!isEditing)
                    userInput.add(u);

                RunnerClass.mf.removeP();
            }
        });
        RunnerClass.mf.addP(dividerPanel);
//        RunnerClass.mf.pack();
    }//GEN-LAST:event_dividerActionPerformed

    private void quickxportItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_quickxportItemStateChanged
        //Sets the appropriate fields as visible
        qxName.setVisible(quickxport.getSelectedItem().toString().startsWith("List"));
        qxNameLabel.setVisible(quickxport.getSelectedItem().toString().startsWith("List"));
    }//GEN-LAST:event_quickxportItemStateChanged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JCheckBox bold;
    private javax.swing.JButton checkBox;
    private javax.swing.JButton delButton;
    private javax.swing.JButton divider;
    private javax.swing.JButton downButton;
    private javax.swing.JButton editButton;
    private javax.swing.JButton fileDirectory;
    public javax.swing.JSpinner fontSize;
    public javax.swing.JCheckBox italics;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton listChoice;
    private javax.swing.JButton passwordField;
    public javax.swing.JComboBox quickxport;
    public javax.swing.JTextField qxName;
    private javax.swing.JLabel qxNameLabel;
    private javax.swing.JButton space;
    private javax.swing.JButton staticText;
    private javax.swing.JButton textInput;
    public javax.swing.JTextField title;
    private javax.swing.JButton upButton;
    private javax.swing.JList userInputList;
    public javax.swing.JCheckBox userInputOption;
    private javax.swing.JPanel userInputPanel;
    // End of variables declaration//GEN-END:variables
}
