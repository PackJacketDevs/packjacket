/*
 * PackJacket - GUI frontend to IzPack to make Java-based installers
 * Copyright (C) 2008 - 2009  Amandeep Grewal, Manodasan Wignarajah
 *
 * PackJacket is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PackJacket is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PackJacket.  If not, see <http://www.gnu.org/licenses/>.
 */
package packjacket.gui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import packjacket.RunnerClass;
import packjacket.xml.Shortcut;

/**
 * Contains implementation of the Shortcuts Panel
 * @author Manodasan Wignarajah
 */
public class ShortcutsPanel extends javax.swing.JPanel {

    public ArrayListModel<Shortcut> shortcuts;
    public boolean isEditing;

    /** Creates new form ShortcutsPanel */
    public ShortcutsPanel() {
        initComponents();
        shortcuts = new ArrayListModel(shortcutsList);
        isEditing = false;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel8 = new javax.swing.JLabel();
        defaultName = new javax.swing.JTextField();
        locationShortcut = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        DesktopShortcutCheckboxEnabled = new javax.swing.JCheckBox();
        addShortcutButton = new javax.swing.JButton();
        editShortcutButton = new javax.swing.JButton();
        deleteShortcutButton = new javax.swing.JButton();
        packsListScroll1 = new javax.swing.JScrollPane();
        shortcutsList = new javax.swing.JList();
        defautCurrentUser = new javax.swing.JCheckBox();

        jLabel8.setText("Group Structure");

        defaultName.setToolTipText("Specifies the name that the group menu should have on the target system.  The ShortcutPanel will present this name to the user as a choice.");

        locationShortcut.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Applications (recommended)", "Start Menu" }));

        jLabel9.setText("Location");

        DesktopShortcutCheckboxEnabled.setText("Pre-select \"Desktop Shortcuts\" Checkbox");

        addShortcutButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/add.png"))); // NOI18N
        addShortcutButton.setText("Add");
        addShortcutButton.setMaximumSize(new java.awt.Dimension(75, 27));
        addShortcutButton.setMinimumSize(new java.awt.Dimension(75, 27));
        addShortcutButton.setPreferredSize(new java.awt.Dimension(35, 25));
        addShortcutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addShortcutButtonActionPerformed(evt);
            }
        });

        editShortcutButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/edit.png"))); // NOI18N
        editShortcutButton.setText("Edit");
        editShortcutButton.setMaximumSize(new java.awt.Dimension(75, 27));
        editShortcutButton.setMinimumSize(new java.awt.Dimension(75, 27));
        editShortcutButton.setPreferredSize(new java.awt.Dimension(35, 25));
        editShortcutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editShortcutButtonActionPerformed(evt);
            }
        });

        deleteShortcutButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/remove.png"))); // NOI18N
        deleteShortcutButton.setText("Delete");
        deleteShortcutButton.setMaximumSize(new java.awt.Dimension(75, 27));
        deleteShortcutButton.setMinimumSize(new java.awt.Dimension(75, 27));
        deleteShortcutButton.setPreferredSize(new java.awt.Dimension(35, 25));
        deleteShortcutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteShortcutButtonActionPerformed(evt);
            }
        });

        packsListScroll1.setViewportView(shortcutsList);

        defautCurrentUser.setText("Make current user default to install shortcuts on");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(packsListScroll1, javax.swing.GroupLayout.DEFAULT_SIZE, 385, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addShortcutButton, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editShortcutButton, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteShortcutButton, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                        .addGap(4, 4, 4))
                    .addComponent(DesktopShortcutCheckboxEnabled)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(locationShortcut, 0, 304, Short.MAX_VALUE)
                            .addComponent(defaultName, javax.swing.GroupLayout.DEFAULT_SIZE, 304, Short.MAX_VALUE)))
                    .addComponent(defautCurrentUser))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(defaultName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(locationShortcut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addComponent(DesktopShortcutCheckboxEnabled)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(defautCurrentUser)
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addShortcutButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editShortcutButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteShortcutButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(packsListScroll1, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addShortcutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addShortcutButtonActionPerformed
        //Performs appropriate action if user is adding a new shortuct
        isEditing = false;

        final GeneralShortcutsPanel gen = new GeneralShortcutsPanel();
        final OptionalShortcutsPanel genop = new OptionalShortcutsPanel();
        makePanel(gen, genop);
}//GEN-LAST:event_addShortcutButtonActionPerformed

    /**
     * Creates the panel, adds appropriate action listener and adds it to the JFrame
     * @param gen the general panel
     * @param genop the optional panel
     */
    private void makePanel(final GeneralShortcutsPanel gen, final OptionalShortcutsPanel genop) {
        RunnerClass.mf.addP(GUIUtils.makeCollapserPanel(gen, genop, new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                //The errors
                StringBuffer errorMsg = new StringBuffer();
                if (gen.name.getText().trim().equals(""))
                    errorMsg.append("You have not specified a name for the shortcut.\n");
                if ((gen.targetFileOption.isSelected() && gen.targetFile.getSelectedItem().toString().trim().equals("")) || (gen.urlOption.isSelected() && gen.url.getText().trim().equals("")))
                    errorMsg.append("You have selected to specify a " + (gen.targetFileOption.isSelected() ? "target file" : "url") + " but have not specified one.\n");
                if (!gen.applications.isSelected() && !gen.programGroup.isSelected() && !gen.startup.isSelected() && !gen.startMenu.isSelected() && !gen.desktop.isSelected())
                    errorMsg.append("You have not specified anywhere to place your shortcut in.\n");
                if (genop.commandLineOption.isSelected() && genop.commandLine.getText().trim().equals(""))
                    errorMsg.append("You have selected the command line option, but have not specified a command line.\n");
                if (genop.workingDirectoryOption.isSelected() && genop.workingDirectory.getText().trim().equals(""))
                    errorMsg.append("You have selected the working directory option, but have not specified a working directory.\n");
                if (genop.iconOption.isSelected() && genop.iconFile.getSelectedItem().toString().trim().equals(""))
                    errorMsg.append("You have selected the icon option, but have not specified a icon file.\n");
                if (errorMsg.length() != 0) {
                    String msg = errorMsg.substring(0, errorMsg.length() - 1);
                    JOptionPane.showMessageDialog(RunnerClass.mf, msg, "Incomplete Data", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                //Gets or creates a Shortcut depending on whether editing or not
                Shortcut s;
                if (isEditing)
                    s = shortcuts.getElement();
                else
                    s = new Shortcut();
                //Sets the values
                s.shortcuts_shortcut_name = gen.name.getText().trim();
                s.shortcuts_shortcut_application = gen.applications.isSelected();
                s.shortcuts_shortcut_commandLine = genop.commandLine.getText().trim();
                s.shortcuts_shortcut_commandLineOption = genop.commandLineOption.isSelected();
                s.shortcuts_shortcut_description = genop.description.getText().trim();
                s.shortcuts_shortcut_desktop = gen.desktop.isSelected();
                s.shortcuts_shortcut_iconFile = genop.iconFile.getSelectedItem().toString().trim();
                s.shortcuts_shortcut_iconFileOption = genop.iconOption.isSelected();
                s.shortcuts_shortcut_iconIndex = ((Integer) genop.iconIndex.getValue()).intValue();
                s.shortcuts_shortcut_initialState = genop.initialState.getSelectedItem().toString();
                s.shortcuts_shortcut_programGroup = gen.programGroup.isSelected();
                s.shortcuts_shortcut_startMenu = gen.startMenu.isSelected();
                s.shortcuts_shortcut_startup = gen.startup.isSelected();
                s.shortcuts_shortcut_target = gen.targetFile.getSelectedItem().toString().trim();
                s.shortcuts_shortcut_terminal = genop.terminal.isSelected();
                s.shortcuts_shortcut_workingDirectory = genop.workingDirectory.getText().trim();
                s.shortcuts_shortcut_workingDirectoryOption = genop.workingDirectoryOption.isSelected();
                s.targetOption = gen.targetFileOption.isSelected();
                s.url = gen.url.getText().trim();
                s.urlOption = gen.urlOption.isSelected();
                s.requiresSudo = genop.sudo.isSelected();
                s.allUsers = genop.allUsers.isSelected();
                s.rootUser = genop.userName.getText().trim();
                s.createForPacks = genop.packs.list;
                if (!isEditing)
                    shortcuts.add(s);

                RunnerClass.mf.removeP();
            }
        },
                new ActionListener() {

                    public void actionPerformed(ActionEvent e) {

                        RunnerClass.mf.removeP();
                    }
                }));
    }

    private void editShortcutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editShortcutButtonActionPerformed
        //Sets the value on the GUI if user is editing an already created shortcut
        isEditing = true;

        final GeneralShortcutsPanel gen = new GeneralShortcutsPanel();
        final OptionalShortcutsPanel genop = new OptionalShortcutsPanel();
        Shortcut s = shortcuts.getElement();
        gen.name.setText(s.shortcuts_shortcut_name);
        gen.applications.setSelected(s.shortcuts_shortcut_application);
        genop.commandLine.setText(s.shortcuts_shortcut_commandLine);
        genop.commandLineOption.setSelected(s.shortcuts_shortcut_commandLineOption);
        genop.description.setText(s.shortcuts_shortcut_description);
        gen.desktop.setSelected(s.shortcuts_shortcut_desktop);
        genop.iconFile.setSelectedItem(s.shortcuts_shortcut_iconFile);
        genop.iconOption.setSelected(s.shortcuts_shortcut_iconFileOption);
        genop.iconIndex.setValue(new Integer(s.shortcuts_shortcut_iconIndex));
        genop.initialState.setSelectedItem(s.shortcuts_shortcut_initialState);
        gen.programGroup.setSelected(s.shortcuts_shortcut_programGroup);
        gen.startMenu.setSelected(s.shortcuts_shortcut_startMenu);
        gen.startup.setSelected(s.shortcuts_shortcut_startup);
        gen.targetFile.setSelectedItem(s.shortcuts_shortcut_target);
        genop.terminal.setSelected(s.shortcuts_shortcut_terminal);
        genop.workingDirectory.setText(s.shortcuts_shortcut_workingDirectory);
        genop.workingDirectoryOption.setSelected(s.shortcuts_shortcut_workingDirectoryOption);
        gen.targetFileOption.setSelected(s.targetOption);
        gen.url.setText(s.url);
        gen.urlOption.setSelected(s.urlOption);
        genop.sudo.setSelected(s.requiresSudo);
        genop.allUsers.setSelected(s.allUsers);
        genop.userName.setText(s.rootUser);
        genop.packs.setList((ArrayList<String>) s.createForPacks);
        genop.createForPackText.setText(genop.packs.toString());
        //Adjusts the fields depending on the values
        gen.adjustFields();
        genop.adjustFields();
        makePanel(gen, genop);
}//GEN-LAST:event_editShortcutButtonActionPerformed

    private void deleteShortcutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteShortcutButtonActionPerformed
        //Removes the currently chosen shortcut
        shortcuts.remove();
}//GEN-LAST:event_deleteShortcutButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JCheckBox DesktopShortcutCheckboxEnabled;
    private javax.swing.JButton addShortcutButton;
    public javax.swing.JTextField defaultName;
    public javax.swing.JCheckBox defautCurrentUser;
    private javax.swing.JButton deleteShortcutButton;
    private javax.swing.JButton editShortcutButton;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    public javax.swing.JComboBox locationShortcut;
    private javax.swing.JScrollPane packsListScroll1;
    private javax.swing.JList shortcutsList;
    // End of variables declaration//GEN-END:variables
}
