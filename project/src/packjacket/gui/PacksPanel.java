/*
 * PackJacket - GUI frontend to IzPack to make Java-based installers
 * Copyright (C) 2008 - 2009  Amandeep Grewal, Manodasan Wignarajah
 *
 * PackJacket is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PackJacket is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PackJacket.  If not, see <http://www.gnu.org/licenses/>.
 */
package packjacket.gui;

import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import packjacket.RunnerClass;
import packjacket.gui.packs.GeneralPanel;
import packjacket.gui.packs.GeneralOptionalPanel;
import packjacket.gui.packs.QuickErrorFix;
import packjacket.xml.Executable;
import packjacket.xml.Pack;
import packjacket.xml.Parsable;
import packjacket.xml.Shortcut;
import packjacket.xml.XFile;

/**
 * Panel allowing creating and maintaining a list of packs.
 * @author Amandeep Grewal
 * @author Manodasan Wignarajah
 */
public class PacksPanel extends javax.swing.JPanel {

    public ArrayListModel<Pack> packs;
    public boolean isEditing;
    public GeneralPanel gen;
    public GeneralOptionalPanel genop;

    /** Creates new form PacksPanel */
    public PacksPanel() {
        initComponents();
        packs = new ArrayListModel(packsList);
        isEditing = false;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        deleteBtn = new JButton();
        upBtn = new JButton();
        downBtn = new JButton();
        editBtn = new JButton();
        addBtn = new JButton();
        jScrollPane1 = new JScrollPane();
        packsList = new JList();

        deleteBtn.setIcon(new ImageIcon(getClass().getResource("/resources/remove.png"))); // NOI18N
        deleteBtn.setText("Remove");
        deleteBtn.setPreferredSize(new Dimension(35, 25));
        deleteBtn.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        upBtn.setIcon(new ImageIcon(getClass().getResource("/resources/up.png"))); // NOI18N
        upBtn.setText("Up");
        upBtn.setPreferredSize(new Dimension(35, 25));
        upBtn.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                upBtnActionPerformed(evt);
            }
        });

        downBtn.setIcon(new ImageIcon(getClass().getResource("/resources/down.png"))); // NOI18N
        downBtn.setText("Down");
        downBtn.setPreferredSize(new Dimension(35, 25));
        downBtn.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                downBtnActionPerformed(evt);
            }
        });

        editBtn.setIcon(new ImageIcon(getClass().getResource("/resources/edit.png"))); // NOI18N
        editBtn.setText("Edit");
        editBtn.setPreferredSize(new Dimension(35, 25));
        editBtn.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                editBtnActionPerformed(evt);
            }
        });

        addBtn.setIcon(new ImageIcon(getClass().getResource("/resources/add.png"))); // NOI18N
        addBtn.setText("Add");
        addBtn.setPreferredSize(new Dimension(35, 25));
        addBtn.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        CursorController.createListener(this, addBtn);

        packsList.addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent evt) {
                packsListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(packsList);

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addBtn, GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(editBtn, GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(deleteBtn, GroupLayout.PREFERRED_SIZE, 95, Short.MAX_VALUE)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(upBtn, GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(downBtn, GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 501, Short.MAX_VALUE)
                        .addGap(11, 11, 11))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(downBtn, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(upBtn, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteBtn, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(editBtn, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(addBtn, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addBtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        //Performs the approriate actions if user is adding a new pack
        isEditing = false;
        gen = new GeneralPanel();
        genop = new GeneralOptionalPanel();
        makePanel(gen, genop);
    }//GEN-LAST:event_addBtnActionPerformed

    /**
     * Creates the panel with the appropriate action listener and adds the panel which allows filling fields for packs
     * @param gen the General panel for packs
     * @param genop the optional panel for packs
     */
    public void makePanel(final GeneralPanel gen, final GeneralOptionalPanel genop) {
        RunnerClass.mf.addP(GUIUtils.makeCollapserPanel(gen, genop,
                new ActionListener() {

                    @Override
                    public void actionPerformed(ActionEvent e) {
                        //Gets error
                        StringBuffer errormsg = new StringBuffer();
                        if (gen.name.getText().trim().equals(""))
                            errormsg.append("You have not specified a pack name.\n");
                        if (gen.files.list.isEmpty())
                            errormsg.append("You have not specified any files for your pack.\n");
                        errormsg.append(((OSPanel) genop.osPanel).getError());
                        if (errormsg.length() != 0) {
                            String msg = errormsg.substring(0, errormsg.length() - 1);
                            JOptionPane.showMessageDialog(RunnerClass.mf, msg, "Incomplete Data", JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                        //Checks if the pack is being edited, if it is, checks if the pack name changed is used in one of the create for pack values, if so prompt warning message
                        if (isEditing) {
                            Pack p = packs.getElement();
                            //Gets all the shortcuts with disassociation problems
                            ArrayList<Shortcut> shortcuts = QuickErrorFix.getShortcuts();
                            //Checks if the user changed the name of the pack and whether it caused any disassociation problems
                            if (!p.pack_name.equals(gen.name.getText().trim()) && shortcuts.size() != 0) {
                                //Alerts the user and provides the user with various options
                                int t = JOptionPane.showOptionDialog(gen, "Warning: The pack name which you just changed was used as a \"Create for Pack\" value in one of the shortcuts.\n                  Update - Automatically change references to the previous pack name to the new pack name.\n                  Keep - Keep references to the previous pack name.\n                  Easy Fix - Easily change/update the disassociated\"Create for Pack\" values\n                  Cancel - Goes back to the pack editing screen\nNote: Any references in one of the \"Create for Pack\" values to non-existent packs will require you to create the pack before generating an installer.", "Warning: Previous pack name used in \"Create for Pack\"", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, new String[]{"Update", "Keep", "Easy Fix", "Cancel"}, "Update");
                                //Sets all the old pack names in \"Create for Pack\" to the new one
                                if (t == 0) {
                                    String old = p.pack_name;
                                    String neww = gen.name.getText().trim();
                                    for (Shortcut s : shortcuts) {
                                        s.createForPacks.remove(old);
                                        s.createForPacks.add(neww);
                                    }
                                } //Doesn't do any changes
                                else if (t == 1) {
                                }//Uses QuickErrorFix to solve the disassociation problems
                                else if (t == 2) {
                                    RunnerClass.mf.addP(new QuickErrorFix(shortcuts));
                                    return;
                                }//Goes back to the pack editing screen
                                else
                                    return;
                            }
                        }
                        //Continues with setting the updated pack values or adding new pack values
                        setValues();
                        packsListValueChanged(null);
                    }
                },
                new ActionListener() {

                    @Override
                    public void actionPerformed(ActionEvent e) {
                        RunnerClass.mf.removeP();
                    }
                }));
    }

    /**
     * Used to set the values of the pack attributes
     */
    public void setValues() {
        Pack p;
        //New or existing
        if (isEditing)
            p = packs.getElement();
        else
            p = new Pack();

        //Sets the values
        p.pack_name = gen.name.getText().trim();
        p.executables = genop.executables.list;
        p.file = gen.files.list;
        p.pack_depends = genop.depends.list;
        p.pack_description = gen.description.getText().trim();
        p.pack_os = ((OSPanel) genop.osPanel).getOS();
        p.pack_packImgId = genop.screenshot.getText().trim();
        p.pack_parent = genop.parent.getSelectedItem().toString();
        p.pack_preselected = gen.preselected.isSelected();
        p.pack_required = gen.required.isSelected();
        p.parsables = genop.parsables.list;
        p.pack_hidden = genop.hidden.isSelected();
        p.pack_loose = genop.loose.isSelected();
        //Adds to the pack list if not editing
        if (!isEditing)
            packs.add(p);

        RunnerClass.mf.removeP();
    }

    private void deleteBtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        //Removes the current pack
        packs.remove();
        packsListValueChanged(null);
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void upBtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_upBtnActionPerformed
        //Moves up the pack one index
        packs.moveUp();
    }//GEN-LAST:event_upBtnActionPerformed

    private void downBtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_downBtnActionPerformed
        //Moves down the pack one index
        packs.moveDown();
    }//GEN-LAST:event_downBtnActionPerformed

    private void editBtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_editBtnActionPerformed
        //Sets the fields in the GUI if user is editing an already made pack
        isEditing = true;

        gen = new GeneralPanel();
        genop = new GeneralOptionalPanel();

        Pack p = packs.getElement();
        //Sets the values for the fields on the GUI
        gen.name.setText(p.pack_name);
        genop.executables.setList((ArrayList<Executable>) p.executables);
        gen.files.setList((ArrayList<XFile>) p.file);
        genop.depends.setList((ArrayList<String>) p.pack_depends);
        gen.description.setText(p.pack_description);
        ((OSPanel) genop.osPanel).setOS(p.pack_os);
        genop.screenshot.setText(p.pack_packImgId);
        genop.parent.setSelectedItem(p.pack_parent);
        gen.preselected.setSelected(p.pack_preselected);
        gen.required.setSelected(p.pack_required);
        genop.parsables.setList((ArrayList<Parsable>) p.parsables);
        genop.dependsChoices.removeItem(p.toString());
        genop.parent.removeItem(p.toString());
        genop.hidden.setSelected(p.pack_hidden);
        genop.loose.setSelected(p.pack_loose);
        makePanel(gen, genop);
    }//GEN-LAST:event_editBtnActionPerformed

    private void packsListValueChanged(ListSelectionEvent evt) {//GEN-FIRST:event_packsListValueChanged
        if (packs.getSize() != 0)
            editBtn.setEnabled(!packs.getElement().toString().equals(packs.getElement().xmlFile));
        else
            editBtn.setEnabled(true);
    }//GEN-LAST:event_packsListValueChanged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    JButton addBtn;
    JButton deleteBtn;
    JButton downBtn;
    JButton editBtn;
    JScrollPane jScrollPane1;
    JList packsList;
    JButton upBtn;
    // End of variables declaration//GEN-END:variables
}
