/*
 * PackJacket - GUI frontend to IzPack to make Java-based installers
 * Copyright (C) 2008 - 2009  Amandeep Grewal, Manodasan Wignarajah
 *
 * PackJacket is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PackJacket is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PackJacket.  If not, see <http://www.gnu.org/licenses/>.
 */
package packjacket.gui.create;

import java.io.IOException;
import java.util.Queue;
import java.util.logging.Level;
import javax.swing.JOptionPane;
import packjacket.RunnerClass;
import packjacket.StaticUtils;
import packjacket.tasks.Crash;
import packjacket.tasks.Task;

/**
 * Shows the progress of all tasks, and catches any errors.
 * @author Amandeep Grewal
 */
public class ProgressFrame extends javax.swing.JFrame {

    public int tasksNum, done;
    public Queue<Task> tasks;
    public Task currentTask;
    public boolean stop;

    /** Creates new form ProgressFrame */
    public ProgressFrame(int tasks) {
        this.tasksNum = tasks;
        stop = false;
        initComponents();
    }

    /** Creates new form ProgressFrame */
    public ProgressFrame(Queue<Task> tasks) {
        this(0);
        this.tasks = tasks;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        overallMsg = new javax.swing.JLabel();
        overallPB = new javax.swing.JProgressBar();
        taskMsg = new javax.swing.JLabel();
        taskPB = new javax.swing.JProgressBar();
        title = new javax.swing.JLabel();
        ok = new javax.swing.JButton();
        cancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        overallMsg.setFont(new java.awt.Font("DejaVu Sans", 2, 13)); // NOI18N
        overallMsg.setText("Overall Message");

        taskMsg.setFont(new java.awt.Font("DejaVu Sans", 2, 13)); // NOI18N
        taskMsg.setText("Task Message");

        title.setFont(new java.awt.Font("DejaVu Sans", 1, 18)); // NOI18N
        title.setText("Creating Installer");

        ok.setText("OK");
        ok.setEnabled(false);
        ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okActionPerformed(evt);
            }
        });

        cancel.setText("Cancel");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(title)
                    .addComponent(overallPB, javax.swing.GroupLayout.DEFAULT_SIZE, 776, Short.MAX_VALUE)
                    .addComponent(overallMsg)
                    .addComponent(taskPB, javax.swing.GroupLayout.DEFAULT_SIZE, 776, Short.MAX_VALUE)
                    .addComponent(taskMsg)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(cancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ok)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(title)
                .addGap(18, 18, 18)
                .addComponent(overallPB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(overallMsg)
                .addGap(18, 18, 18)
                .addComponent(taskPB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(taskMsg)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ok)
                    .addComponent(cancel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okActionPerformed
        //Closes window is taks are done
        if (ok.isEnabled())
            dispose();
    }//GEN-LAST:event_okActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        okActionPerformed(null);
    }//GEN-LAST:event_formWindowClosing

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        //Sets daemon flag to stop the process
        stop = true;
        //Current tak killed
        currentTask.stop();
    }//GEN-LAST:event_cancelActionPerformed

    /**
     * Crash occured, uplaod log
     * @throws IOException
     */
    public void crash(String err) throws IOException {
        //Stop all
        cancelActionPerformed(null);
        //Uplaod logfile, and get ID
        long i = StaticUtils.uploadLog(StaticUtils.gzipLog());
        setVisible(false);

        //If ID is 0, error occured while uplaoding
        if (i != 0)
            if (err.equals("outOfMemoryError"))
                JOptionPane.showMessageDialog(RunnerClass.mf,
                        "An out of memory error occurred when creating the installer.\n" +
                        "Consider closing some applications to free up memory,\n" +
                        "and/or disabling Pack200 Compression in the General tab under\n" +
                        "Optional Advanced Features as this is known to use a lot of memory..",
                        "Error", JOptionPane.ERROR_MESSAGE);
            else if (err.equals("memory below 0"))
                JOptionPane.showMessageDialog(RunnerClass.mf,
                        "PackJacket could not determine an appropriate memory value.\n" +
                        "Consider closing some applications to free up memory.",
                        "Error", JOptionPane.ERROR_MESSAGE);
            else {
                //Tell user that error happened, and log was submitted
                Crash dia = new Crash();
                dia.setTitle("Error Occurred");
                dia.setIconImages(RunnerClass.mf.getIconImages());
                dia.id.setText("" + i);
                dia.pack();
                dia.setLocationRelativeTo(null);
                dia.setVisible(true);
            }
        else
            JOptionPane.showMessageDialog(RunnerClass.mf,
                    "An error occurred when creating the installer.\n" +
                    "Unfortunately, a connection to the internet could not be made, so a logfile could not be uploaded.\n" +
                    "Please file a bug report by going to the \"About\" menu and clicking \"Submit Bug Report\",\n" +
                    "and describe the situation, and upload a PJC file, as long as no sensitive personal\n" +
                    "information is in your configuration. You can find the log file at this path:\n" +
                    RunnerClass.homedir + "pj.log.pjl",
                    "Error", JOptionPane.ERROR_MESSAGE);
    }

    public void crash() throws IOException {
        crash("");
    }

    /**
     * Sets the task bar to a certian percentage, overall bar will follow in preportion
     * @param i percentage to set to
     */
    public void setPB(int i) {
        int donePerc = (done * 100) / tasksNum;
        int taskPerc = i / tasksNum;
        overallPB.setValue(donePerc + taskPerc);
        taskPB.setValue(i);
        if (i >= 100)
            done++;
    }

    /**
     * Shows or hides the frame, when showing, start the thread to run the tasks
     * @param show
     */
    @Override
    public void setVisible(boolean show) {
        if (show)
            //Starts new thread
            new Thread(new Runnable() {

                @Override
                public void run() {
                    try {
                        //go through all tasks and do them
                        while (!tasks.isEmpty()) {
                            currentTask = tasks.poll();
                            currentTask.go();
                            //if daemon flag is set, cancel this tasks, by throwing exception
                            if (stop)
                                throw new InterruptedException();
                        }
                        //Signify Completion
                        taskMsg.setText("");
                        overallMsg.setText("Completed!");
                        ok.setEnabled(true);
                        cancel.setEnabled(false);
                    } catch (InterruptedException ex) {
                        //User stopped, or crashed
                        overallPB.setValue(0);
                        taskPB.setIndeterminate(false);
                        taskPB.setValue(0);
                        taskMsg.setText("");
                        overallMsg.setText("Cancelled!");
                        ok.setText("Close");
                        ok.setEnabled(true);
                        cancel.setEnabled(false);
                        return;
                    } catch (Exception ex) {
                        //Any exception occurs, task is automatically stopped a la exception, now must upload, and show user error message
                        try {
                            RunnerClass.logger.log(Level.SEVERE, null, ex);
                            crash();
                        } catch (IOException ex1) {
                            RunnerClass.logger.log(Level.SEVERE, null, ex1);
                        }
                    }
                }
            }).start();
        //Actually shows or hides
        super.setVisible(show);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton cancel;
    public javax.swing.JButton ok;
    public javax.swing.JLabel overallMsg;
    public javax.swing.JProgressBar overallPB;
    public javax.swing.JLabel taskMsg;
    public javax.swing.JProgressBar taskPB;
    public javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
}
